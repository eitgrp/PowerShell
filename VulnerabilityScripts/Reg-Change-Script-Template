<####################################################################################################################################################################
#
# This script is a template for making changes to the registry.
# The use it, simply copy the "$RegChange" array, and input your data.
# Add a number to the end of each RegChange array, "RegChange1", "RegChange2", etc.
# Add the array names to the $ChangeList, enclosed in brackets, seperated by commas
# E.G $ChangeList = @(($regChange1),($regChange2),($regChange3))
# 
# Below are some notes on each variable and how to input data into them correctly
# 
# **** REGPATH ****
# The registry path should begin with one of the prefixes below, followed by :\
# 
# HKCR (HKEY_CLASSES_ROOT) / HKCU (HKEY_CURRENT_USER) / HKLM (HKEY_LOCAL_MACHINE) / HKU (HKEY_USERS) / HKCC (HKEY_CURRENT_CONFIG) 
#
# So for the Local Machine hive, the path would begin with "HKLM:\"
#
# **** REG ITEM NAME ****
# The reg item name is the name of the value you're adding, for example "EnableSecuritySignature"
#
# **** VALUE OF REG ITEM ****
#
# Value of reg item is the data against that value, so to enable security signatures i would set this to 1
# !!! PLEASE NOTE IF THE VALUE OF THE REG ITEM IS A NUMBER, THEN DO NOT PUT QUOTATIONS AROUND THE NUMBER, AS IT WILL INTERPRET IT AS TEXT !!!
#
# **** PROPERTY TYPE ****
# Property type has to match one of the datatypes in the documenation for "reg add", any variation from these will stop the script from running.
# REG_SZ
# REG_DWORD
# !!! These two above will be the only datatypes you need 99% of the time, the others rarely need editing. !!!
#
#**** NAME OF CHANGE ****
# This is purely internal for keeping track of which regChange has errors or incorrect data.
#
###################################################################################################################################################################>
$ChangeList = @(($regChange1),)

$RegChange = @(
    "REG PATH",
    "REG ITEM NAME",
    "VALUE OF REG ITEM",
    "PROPERTY TYPE",
    "NAME OF CHANGE"
)

# Edit this to give your script a title when it is executed
Write-Host "*******************************"
Write-Host "******** SCRIPT TITLE *********"
Write-Host "*******************************"
Write-Host "***** Available Commands: *****"
Write-Host "*********** Commit ************"
Write-Host "*********** Revert ************"
Write-Host "*******************************"


$BackupPath = "C:\Source\Registry-Backups"
function BackupReg {
    if (Test-Path $BackupPath -PathType Container) {
        $BackupExist = Test-Path -Path ($BackupPath + $BackupFile) -PathType Leaf
        if ($BackupExist) {
            return "Successfully found a backup of $RegPath"
        }
    } ELSE {
        New-Item -Path "C:\Source\" -name "Registry-Backups" -ItemType Directory 
    }

    reg save ($RegPath).Replace(":","") ($BackupPath + $BackupFile)

    $BackupCreated = Test-Path -Path ($BackupPath + $BackupFile) -PathType Leaf

    if ($BackupCreated) {
        Write-Host "Successfully created a backup of $RegPath"
    } ELSE {
        Write-Host "Failed to create a backup of the registry key: $RegPath"
    }
}

function DataValidation {
    if ($RegPath -like "Computer\HKEY_LOCAL_MACHINE*") {
        $RegPath = $RegPath.Replace("Computer\HKEY_LOCAL_MACHINE","HKLM:")
    }ELSEIF ($RegPath -like "HKEY_LOCAL_MACHINE*") {
        $RegPath = $RegPath.Replace("HKEY_LOCAL_MACHINE","HKLM:")
    } 
    switch ($DataType) {
        "REG_SZ" {}
        "REG_MULTI_SZ" {}
        "REG_DWORD" {}
        "REG_BINARY" {}
        "REG_DWORD_BIG_ENDIAN" {}
        "REG_DWORD_LITTLE_ENDIAN" {}
        "REG_LINK" {}
        "REG_FULL_RESOURCE_DESCRIPTOR" {}
        "REG_EXPAND_SZ" {}
        default { Write-Host "Unrecognised data type in $ChangeName! Please double check the data type variable (Fourth variable down)." }
    }
    switch ($Value) {
        "0" {$Value = 0}
        "1" {$Value = 1}
    }
}

function PathCheck {
    
    $path = $RegPath
    $PathType = "Any"
    if (!Test-Path -Path $path -PathType $PathType) {
        [array]$SplitPath = $path.split("\")
        $SectionCount = ($SplitPath | Measure-Object).Count
        $x = 0
        DO {
            $PathType = "Container"
            $x++
            $y = $SectionCount - $x
            [string]$z = ($SplitPath[0..$y] -join '\')
            $FindFault = Test-Path -Path $z -PathType $PathType
            if ($y -eq 1) { Return "The registry path for $ChangeName is broken at the root! Please double check the RegPath variable (first variable)" }
        } Until($FindFault)
        Return "The registry path for $ChangeName is broken. The path breaks at $z"
    } ELSE { Return $true; }
}

function CommitChange {

    $TestBackup = Test-Path -Path ($BackupPath + $BackupFile) -pathtype Leaf
    if (!$TestBackup) {
        return "
        Cannot find backup for the registry change $ChangeName
        
        Skipping the change..."
    }

    reg add ($RegPath.Replace(":","")) /v $RegEntry /t $DataType /d $Value /f
    $NewValue = Get-ItemPropertyValue -Path $RegPath -Name $RegEntry

    if ($NewValue -eq $Value) {
        Return "Successfully changed the value of $RegEntry in $RegPath"
    }
    ELSE {
        Return "$ChangeName is not the expected value after changing! The value is $NewValue"
    }
} 
function Commit {
    Foreach ($change in $ChangeList) {
        $script:RegPath = $Change[0]
        $script:RegEntry = $Change[1]
        $script:Value = $Change[2]
        $script:DataType = $Change[3]
        $script:ChangeName = $Change[4]
        $script:BackupFile = "backup$($RegPath.TrimStart("HKLM:").Replace("\","-")).reg"
        DataValidation
        PathCheck
        if ((Get-ItemPropertyValue -Path $RegPath -Name $RegEntry -ErrorAction SilentlyContinue) -eq $Value) {
            Write-Host "The change $ChangeName is already the desired value! Skipping..."
        } ELSE { 
            BackupReg
            CommitChange
        }
    }
}

function Revert {
    Foreach ($change in $ChangeList) {
        $script:RegPath = $Change[0]
        $script:RegEntry = $Change[1]
        $script:Value = $Change[2]
        $script:DataType = $Change[3]
        $script:ChangeName = $Change[4]
        $BackupFile = "backup$($RegPath.TrimStart("HKLM:").Replace("\","-")).reg"
        $RestoreOperation = Reg Restore ($RegPath).Replace(":","") ($BackupPath + $BackupFile)
        if ($RestoreOperation -like "The operation completed successfully.") {
            Write-Host "Successful restored the registry for path: $RegPath"
        } ELSE {
            Write-Host "Failed to restore the registry for the path: $RegPath"
        }
    }
}
